<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3894.vd0f0248b_a_fc4">
    <script>
pipeline {
    agent { label &apos;Agent1&apos; }
    stages {
        stage(&apos;CHECKOUT&apos;) {
            steps {
               echo &quot;Getting Project from Git&quot;; 
                git branch: &quot;main&quot;, 
                    url: &quot;https://github.com/raniabns/ski-devops.git&quot;
                    //credentialsId: &quot;git-jenkins-credentials&quot;; 
            }
        }
       stage(&apos;SonarQube analysis&apos;) {
            steps {
                script {
		   sh &apos;mvn clean&apos;
                    sh &apos;mvn compile sonar:sonar -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.organization=Ski-Station Devops -Dsonar.projectKey=deployskiStation -Dsonar.login=16aadcafad9e921cf0c36411e78a98c02a03777a&apos;
                }
            }
        }
        stage(&apos;Build Artifact&apos;) {
            steps {
                sh &apos;mvn package -DskipTests&apos;
            }
        }
        stage(&apos;deploy Artifact&apos;) {
            steps {
                sh &apos;mvn deploy -DskipTests&apos; 
            }
        }
        stage(&apos;Build Docker image&apos;) {
            steps {
                script {
                    sh &apos;docker build -t app-container .&apos;
                }
            }
        }
        /*stage(&apos;Run Docker image&apos;) {
            steps {
                script {
                    sh &apos;docker-compose up -d&apos;
                }
            }
        }*/
    }
    post {
        always {
            cleanWs()
        }
    }}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>